<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
        "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
        "http://www.puppycrawl.com/dtds/configuration_1_3.dtd">

<module name="Checker">

    <module name="RegexpSingleline">
        <property name="format" value="((//.*)|(\*.*))TODO\("/>
        <property name="message" value="TODO comments must not include usernames."/>
        <property name="severity" value="error"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="\s+$"/>
        <property name="message" value="Trailing whitespace"/>
        <property name="severity" value="error"/>
    </module>

    <module name="RegexpSingleline">
        <property name="format" value="Throwables.propagate\("/>
        <property name="message" value="Throwables.propagate is deprecated"/>
        <property name="severity" value="error"/>
    </module>

    <module name="SuppressionFilter">
        <property name="file" value="${checkstyle.suppressions.file}" default="suppressions.xml"/>
    </module>

    <module name="FileLength">
        <property name="max" value="3000"/>
    </module>

    <module name="TreeWalker">

        <module name="SuppressionCommentFilter">
            <property name="offCommentFormat" value="CHECKSTYLE.OFF\: ([\w\|]+)"/>
            <property name="onCommentFormat" value="CHECKSTYLE.ON\: ([\w\|]+)"/>
            <property name="checkFormat" value="$1"/>
        </module>

        <module name="Regexp">
            <property name="format" value="Boolean\.getBoolean"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use System.getProperties() to get system properties."/>
        </module>

        <module name="Regexp">
            <property name="format" value="Integer\.getInteger"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use System.getProperties() to get system properties."/>
        </module>

        <module name="Regexp">
            <property name="format" value="Long\.getLong"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use System.getProperties() to get system properties."/>
        </module>

        <module name="Regexp">
            <property name="format" value="org\.apache\.commons\.lang3\.Validate"/>
            <property name="illegalPattern" value="true"/>
            <property name="message"
                      value="Use Guava Checks instead of Commons Validate. Please refer to the coding guidelines."/>
        </module>

        <module name="Regexp">
            <property name="format" value="import com\.google\.common\.base\.Preconditions"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use Flink's Preconditions instead of Guava's Preconditions"/>
        </module>

        <module name="Regexp">
            <property name="format" value="import com\.google\.common\.annotations\.VisibleForTesting"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use Flink's VisibleForTesting instead of Guava's VisibleForTesting"/>
        </module>

        <module name="Regexp">
            <property name="format" value="import static com\.google\.common\.base\.Preconditions"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use Flink's Preconditions instead of Guava's Preconditions"/>
        </module>

        <module name="Regexp">
            <property name="format" value="org\.apache\.commons\.lang\.SerializationUtils"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use Flink's InstantiationUtil instead of common's SerializationUtils"/>
        </module>

        <module name="Regexp">
            <property name="format" value="org\.apache\.commons\.lang3\.SerializationUtils"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use Flink's InstantiationUtil instead of common's SerializationUtils"/>
        </module>

        <module name="Regexp">
            <property name="format" value="org\.apache\.commons\.lang\."/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use commons-lang3 instead of commons-lang."/>
        </module>

        <module name="Regexp">
            <property name="format" value="org\.codehaus\.jettison"/>
            <property name="illegalPattern" value="true"/>
            <property name="message" value="Use com.fasterxml.jackson instead of jettison."/>
        </module>

        <module name="ArrayTypeStyle"/>

        <module name="RedundantImport">
            <property name="severity" value="error"/>
            <message key="import.redundancy" value="Redundant import {0}."/>
        </module>

        <module name="RedundantModifier">
            <property name="tokens" value="VARIABLE_DEF, ANNOTATION_FIELD_DEF, INTERFACE_DEF, CLASS_DEF, ENUM_DEF"/>
        </module>

        <module name="RegexpSinglelineJava">
            <property name="format" value="^import com.google.common.base.Preconditions;$"/>
            <property name="message" value="Static import functions from Guava Preconditions"/>
        </module>

        <module name="UnusedImports">
            <property name="severity" value="error"/>
            <property name="processJavadoc" value="true"/>
            <message key="import.unused" value="Unused import: {0}."/>
        </module>

        <module name="JavadocMethod">
            <property name="scope" value="protected"/>
            <property name="severity" value="error"/>
            <property name="allowMissingJavadoc" value="true"/>
            <property name="allowMissingParamTags" value="true"/>
            <property name="allowMissingReturnTag" value="true"/>
            <property name="allowMissingThrowsTags" value="true"/>
            <property name="allowThrowsTagsForSubclasses" value="true"/>
            <property name="allowUndeclaredRTE" value="true"/>
            <property name="suppressLoadErrors" value="true"/>
        </module>

        <module name="JavadocParagraph"/>

        <module name="JavadocStyle">
            <property name="severity" value="error"/>
            <property name="checkHtml" value="true"/>
        </module>

        <module name="PackageName">
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]{1,})*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="TypeNameCheck">
            <metadata name="altname" value="TypeName"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ConstantNameCheck">
            <metadata name="altname" value="ConstantName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="false"/>
            <property name="format" value="^([A-Z][A-Z0-9]*(_[A-Z0-9]+)*|FLAG_.*)$"/>
            <message key="name.invalidPattern" value="Variable ''{0}'' should be in ALL_CAPS (if it is a constant) or be private (otherwise)."/>
            <property name="severity" value="error"/>
        </module>

        <module name="StaticVariableNameCheck">
            <metadata name="altname" value="StaticVariableName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*_?$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="MemberNameCheck">
            <metadata name="altname" value="MemberName"/>
            <property name="applyToPublic" value="true"/>
            <property name="applyToProtected" value="true"/>
            <property name="applyToPackage" value="true"/>
            <property name="applyToPrivate" value="true"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="MethodNameCheck">
            <metadata name="altname" value="MethodName"/>
            <property name="format" value="^[a-z][a-zA-Z0-9]*(_[a-zA-Z0-9]+)*$"/>
            <property name="severity" value="error"/>
        </module>

        <module name="ParameterName">
            <property name="severity" value="error"/>
        </module>

        <module name="LocalFinalVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="LocalVariableName">
            <property name="severity" value="error"/>
        </module>

        <module name="LeftCurly">
            <property name="severity" value="error"/>
        </module>

        <module name="NeedBraces">
            <property name="severity" value="error"/>
            <property name="tokens" value="LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO"/>
        </module>

        <module name="UpperEll">
            <property name="severity" value="error"/>
        </module>

        <module name="FallThrough">
           <property name="reliefPattern"
                      value="fall through|Fall through|fallthru|Fallthru|falls through|Falls through|fallthrough|Fallthrough|No break|NO break|no break|continue on"/>
            <property name="severity" value="error"/>
        </module>

        <module name="SimplifyBooleanExpression"/>

        <module name="EmptyStatement"/>

        <module name="RegexpSinglelineJava">
            <property name="format" value=";{2,}"/>
            <property name="message" value="Use one semicolon"/>
            <property name="ignoreComments" value="true"/>
        </module>

        <module name="ModifierOrder">
           <property name="severity" value="error"/>
        </module>

        <module name="EmptyLineSeparator">
            <property name="allowMultipleEmptyLines" value="false"/>
            <property name="allowMultipleEmptyLinesInsideClassMembers" value="true"/>
            <property name="tokens" value="PACKAGE_DEF, IMPORT, STATIC_IMPORT, CLASS_DEF, INTERFACE_DEF, ENUM_DEF, STATIC_INIT, INSTANCE_INIT, CTOR_DEF"/>
        </module>

        <module name="WhitespaceAround">
            <property name="tokens" value="ASSIGN, BAND, BAND_ASSIGN, BOR,
        BOR_ASSIGN, BSR, BSR_ASSIGN, BXOR, BXOR_ASSIGN, COLON, DIV, DIV_ASSIGN,
        EQUAL, GE, GT, LAMBDA, LAND, LE, LITERAL_CATCH, LITERAL_DO, LITERAL_ELSE,
        LITERAL_FINALLY, LITERAL_FOR, LITERAL_IF, LITERAL_RETURN,
        LITERAL_SYNCHRONIZED, LITERAL_TRY, LITERAL_WHILE, LOR, LT, MINUS,
        MINUS_ASSIGN, MOD, MOD_ASSIGN, NOT_EQUAL, PLUS, PLUS_ASSIGN, QUESTION,
        SL, SL_ASSIGN, SR_ASSIGN, STAR, STAR_ASSIGN, TYPE_EXTENSION_AND"/>
            <property name="severity" value="error"/>
        </module>

        <module name="WhitespaceAfter">
            <property name="tokens" value="COMMA, SEMI, TYPECAST"/>
        </module>

        <module name="NoWhitespaceAfter">
            <property name="tokens" value="BNOT, DEC, DOT, INC, LNOT, UNARY_MINUS, UNARY_PLUS"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="NoWhitespaceBefore">
            <property name="tokens" value="SEMI, DOT, POST_DEC, POST_INC"/>
            <property name="allowLineBreaks" value="true"/>
            <property name="severity" value="error"/>
        </module>

        <module name="OperatorWrap">
            <property name="option" value="eol"/>
            <property name="tokens" value="ASSIGN"/>
        </module>

        <module name="ParenPad">
            <property name="severity" value="error"/>
        </module>

    </module>
</module>

